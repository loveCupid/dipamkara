// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/gw/proto/http.proto

package http

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HttpReq struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpReq) Reset()         { *m = HttpReq{} }
func (m *HttpReq) String() string { return proto.CompactTextString(m) }
func (*HttpReq) ProtoMessage()    {}
func (*HttpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd3ff042e1fefd4, []int{0}
}

func (m *HttpReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpReq.Unmarshal(m, b)
}
func (m *HttpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpReq.Marshal(b, m, deterministic)
}
func (m *HttpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpReq.Merge(m, src)
}
func (m *HttpReq) XXX_Size() int {
	return xxx_messageInfo_HttpReq.Size(m)
}
func (m *HttpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpReq.DiscardUnknown(m)
}

var xxx_messageInfo_HttpReq proto.InternalMessageInfo

func (m *HttpReq) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type HttpRsp struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpRsp) Reset()         { *m = HttpRsp{} }
func (m *HttpRsp) String() string { return proto.CompactTextString(m) }
func (*HttpRsp) ProtoMessage()    {}
func (*HttpRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bd3ff042e1fefd4, []int{1}
}

func (m *HttpRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpRsp.Unmarshal(m, b)
}
func (m *HttpRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpRsp.Marshal(b, m, deterministic)
}
func (m *HttpRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpRsp.Merge(m, src)
}
func (m *HttpRsp) XXX_Size() int {
	return xxx_messageInfo_HttpRsp.Size(m)
}
func (m *HttpRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HttpRsp proto.InternalMessageInfo

func (m *HttpRsp) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*HttpReq)(nil), "http.HttpReq")
	proto.RegisterType((*HttpRsp)(nil), "http.HttpRsp")
}

func init() { proto.RegisterFile("src/gw/proto/http.proto", fileDescriptor_8bd3ff042e1fefd4) }

var fileDescriptor_8bd3ff042e1fefd4 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2e, 0x4a, 0xd6,
	0x4f, 0x2f, 0xd7, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x28, 0x29, 0x29, 0xd0, 0x03, 0x33,
	0x85, 0x58, 0x40, 0x6c, 0x25, 0x59, 0x2e, 0x76, 0x8f, 0x92, 0x92, 0x82, 0xa0, 0xd4, 0x42, 0x21,
	0x21, 0x2e, 0x96, 0xa4, 0xfc, 0x94, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b,
	0x49, 0x1e, 0x2a, 0x5d, 0x5c, 0x20, 0x24, 0xc2, 0xc5, 0x5a, 0x94, 0x5a, 0x90, 0x03, 0x93, 0x87,
	0x70, 0x8c, 0x8c, 0xb9, 0xb8, 0x41, 0x0a, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x54,
	0xb8, 0x58, 0x9c, 0x13, 0x73, 0x72, 0x84, 0x78, 0xf5, 0xc0, 0x36, 0x41, 0x8d, 0x96, 0x42, 0xe6,
	0x16, 0x17, 0x24, 0xb1, 0x81, 0x5d, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x67, 0xf6,
	0xcf, 0x9c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HttpServiceClient is the client API for HttpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HttpServiceClient interface {
	Call(ctx context.Context, in *HttpReq, opts ...grpc.CallOption) (*HttpRsp, error)
}

type httpServiceClient struct {
	cc *grpc.ClientConn
}

func NewHttpServiceClient(cc *grpc.ClientConn) HttpServiceClient {
	return &httpServiceClient{cc}
}

func (c *httpServiceClient) Call(ctx context.Context, in *HttpReq, opts ...grpc.CallOption) (*HttpRsp, error) {
	out := new(HttpRsp)
	err := c.cc.Invoke(ctx, "/http.HttpService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpServiceServer is the server API for HttpService service.
type HttpServiceServer interface {
	Call(context.Context, *HttpReq) (*HttpRsp, error)
}

func RegisterHttpServiceServer(s *grpc.Server, srv HttpServiceServer) {
	s.RegisterService(&_HttpService_serviceDesc, srv)
}

func _HttpService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/http.HttpService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).Call(ctx, req.(*HttpReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "http.HttpService",
	HandlerType: (*HttpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _HttpService_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/gw/proto/http.proto",
}
